
    <!-- Navigation -->
     <section class="tap-bar">
    <nav class="nav-buttons">
        <div class="tabs"></div>
        <button onclick="filterCategory('all')">ทั้งหมด</button>
        <button onclick="filterCategory('hiragana')">หนังสือฮิรางานะ</button>
        <button onclick="filterCategory('katakana')">หนังสือคาตาคานะ</button>
        <button onclick="filterCategory('kanji')">หนังสือคันจิ</button>
        <button onclick="filterCategory('stationery')">อุปกรณ์เครื่องเขียน</button>
        <input type="text" id="searchBox" placeholder="ค้นหาสินค้า...">
    </nav>
</section>
    <!-- End Navigation -->



    <section class="products-section">
    <div class="container">
        <div id="hiragana" class="tab-content active">
            <h2>Hiragana</h2>
            <div class="products-container">
                <div class="product-item">
                    <img src="images/hiragana_1.jpg" alt="Hiragana Book">
                    <h3>Hiragana Book</h3>
                    <p>Price: $10</p>
                    <button>Add to Cart</button>
                </div>
                <!-- Add more Hiragana items here -->
                <div class="product-item">
                    <img src="images/hiragana_2.jpg" alt="Hiragana Book 2">
                    <h3>Hiragana Book 2</h3>
                    <p>Price: $15</p>
                    <button>Add to Cart</button>
                </div>
                <!-- Add more Hiragana items as needed -->
            </div>
        </div>
        <!-- Add similar content for Katakana and Kanji sections -->
    </div>
</section>


<!-- Product Detail Section -->
<div class="container">
    <div class="product-detail">
        <div class="product-image">
            <img src="/images/<%= product.image %>" alt="<%= product.name %>">
        </div>
        <div class="product-info">
            <h2><%= product.name %></h2>
            <% if (product.sale_price) { %>
                <h3>ราคาลด: <strong class="red">$<%= product.sale_price %></strong></h3>
                <h3 style="text-decoration: line-through;">ราคาปกติ: <strong>$<%= product.price %></strong></h3>
            <% } else { %>
                <h3>ราคา: <strong class="red">$<%= product.price %></strong></h3>
            <% } %>
            <p><%= product.description %></p>
            <form action="/add_to_cart" method="post">
                <input type="hidden" name="id" value="<%= product.id %>">
                <input type="hidden" name="name" value="<%= product.name %>">
                <input type="hidden" name="price" value="<%= product.price %>">
                <input type="hidden" name="sale_price" value="<%= product.sale_price %>">
                <input type="hidden" name="quantity" value="<%= product.quantity %>">
                <input type="hidden" name="image" value="<%= product.image %>">
                <input type="submit" value="เพิ่มลงในตะกร้า" class="btn btn-primary">
            </form>
        </div>
    </div>
</div>
<!-- End Product Detail Section -->






------------------------------------------------ Form.js
// public/js/form-script.js

let questionCount = 0;

function addQuestion() {
    questionCount++;
    const questionContainer = document.createElement('div');
    questionContainer.className = 'question';
    questionContainer.id = `question-${questionCount}`;
    
    questionContainer.innerHTML = `
        <button type="button" class="remove-question" onclick="removeQuestion(${questionCount})">Remove Question</button>
        <div class="form-group">
            <label for="question-${questionCount}-text">Question ${questionCount}</label>
            <input type="text" id="question-${questionCount}-text" name="question-${questionCount}-text" placeholder="Enter your question" required>
        </div>
        <div id="question-${questionCount}-choices" class="choices">
            <div class="choice-group">
                <input type="text" name="question-${questionCount}-choice-1" placeholder="Choice 1" required>
                <button type="button" onclick="addChoice(${questionCount})">Add Choice</button>
            </div>
        </div>
    `;
    
    document.getElementById('questions-container').appendChild(questionContainer);
}

function removeQuestion(questionId) {
    const questionElement = document.getElementById(`question-${questionId}`);
    questionElement.remove();
}

function addChoice(questionId) {
    const choiceCount = document.querySelectorAll(`#question-${questionId}-choices .choice-group`).length + 1;
    const choiceGroup = document.createElement('div');
    choiceGroup.className = 'choice-group';
    
    choiceGroup.innerHTML = `
        <input type="text" name="question-${questionId}-choice-${choiceCount}" placeholder="Choice ${choiceCount}" required>
        <button type="button" onclick="removeChoice(this)">Remove Choice</button>
    `;
    
    document.getElementById(`question-${questionId}-choices`).appendChild(choiceGroup);
}

function removeChoice(button) {
    button.parentElement.remove();
}

document.getElementById('lessonForm').addEventListener('submit', function(event) {
    event.preventDefault();
    
    const formData = new FormData(this);
    for (let [name, value] of formData) {
        console.log(name, value);
    }
    
    alert('Form submitted successfully!');
    this.reset();
    document.getElementById('questions-container').innerHTML = '';
    questionCount = 0;
});
-------------------------------------------------------------





var express = require('express');
var ejs = require('ejs');
var bodyParser = require('body-parser');
var mysql = require('mysql');
var session = require('express-session');

var app = express();

// บอกให้ express ใช้ folder public
app.use(express.static('public'));
app.set('view engine', 'ejs');
app.set('views', __dirname + '/views'); // Ensure this line points to your views directory

app.use(bodyParser.urlencoded({ extended: true }));

// ตั้งค่าการเชื่อมต่อกับฐานข้อมูล MySQL
const connection = mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "",
    database: "node_project_chanpe"
});

//Connection to the MySQL database
connection.connect((error) => {
    if (error) {
        console.error('Error connecting to the database: ', error);
    } else {
        console.log('Connected to the database');
    }
});

app.use(session({
    secret: "secret",
    resave: false,
    saveUninitialized: false
}));

app.get('/product/:id', (req, res) => {
    const productId = parseInt(req.params.id);

    // ดึงข้อมูลสินค้าจากฐานข้อมูล
    connection.query('SELECT * FROM products WHERE id = ?', [productId], (err, result) => {
        if (err) {
            console.error('Error fetching product: ', err);
            res.status(500).send('Internal Server Error');
        } else if (result.length > 0) {
            res.render('pages/product-detail', { product: result[0] });
        } else {
            res.status(404).send('Product not found');
        }
    });
});

app.listen(3000, function() {
    console.log('Server is running on port 3000');
});

app.get('/', function(req, res) {
    res.render('pages/index');
});

app.get('/cart', (req, res) => {
    res.render('pages/cart');
});

app.get('/quiz', (req, res) => {
    res.render('pages/quiz');
});

// แก้ไขเส้นทาง /cart-test เพื่อดึงข้อมูลสินค้าและส่งไปยังหน้า cart-test.ejs
app.get('/product', (req, res) => {
    connection.query("SELECT * FROM products", (err, result) => {
        if (err) {
            console.error('Error fetching products: ', err);
            res.status(500).send('Internal Server Error');
        } else {
            res.render('pages/product', { products: result });
        }
    });
});









<!-- form section -->
<section class="form-section">
    <div class="container">
        <h2>Lesson Form</h2>
        <form id="lessonForm" onsubmit="submitForm(); return false;">
            <div id="questions-container">
                <!-- Example question with choices -->
                <div class="question">
                    <label for="question_1">Question 1:</label>
                    <input type="text" id="question_1" name="question_1" required>
                    <div class="choices">
                        <div class="choice">
                            <input type="text" name="question_1_choice_1" required>
                            <button type="button" class="answer-btn" data-is-correct="true">True</button>
                            <button type="button" onclick="deleteChoice(this)">Delete Choice</button>
                        </div>
                        <div class="choice">
                            <input type="text" name="question_1_choice_2" required>
                            <button type="button" class="answer-btn" data-is-correct="false">False</button>
                            <button type="button" onclick="deleteChoice(this)">Delete Choice</button>
                        </div>
                        <!-- Additional choices can be added dynamically -->
                    </div>
                    <button type="button" onclick="addChoice(this)">Add Choice</button>
                </div>
                <!-- Additional questions can be added dynamically -->
            </div>
            <button type="button" onclick="addQuestion()">Add Question</button>
            <button type="submit">Submit</button>
        </form>
    </div>
</section>
















var express = require('express');
var ejs = require('ejs');
var bodyParser = require('body-parser');
var mysql = require('mysql');
var session = require('express-session');
const multer = require('multer');

var app = express();


app.use(express.static('public'));
app.set('view engine', 'ejs');
app.set('views', __dirname + '/views'); // Ensure this line points to your views directory
app.use(multer({ dest: './uploads/' }).single('lesson_image')); // If using multer for file uploads

app.use(bodyParser.urlencoded({ extended: true }));


const connection = mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "",
    database: "node_project_chanpe"
});


connection.connect((error) => {
    if (error) {
        console.error('Error connecting to the database: ', error);
    } else {
        console.log('Connected to the database');
    }
});

app.use(session({
    secret: "secret",
    resave: false,
    saveUninitialized: false
}));



// Multer setup for file uploads
const upload = multer({ dest: 'uploads/' });

// Route to handle form submission for adding lesson and questions
app.post('/addLessonAndQuestions', upload.single('lesson_image'), (req, res) => {
    const { lesson_name, lesson_description, lesson_image, questions, answers } = req.body;

    // Insert lesson into Lessons table
    const sqlAddLesson = 'INSERT INTO lessons (name, description, image) VALUES (?, ?, ?)';
    connection.query(sqlAddLesson, [lesson_name, lesson_description, lesson_image], (err, result) => {
        if (err) {
            console.error('Error adding lesson:', err);
            res.status(500).send('Failed to add lesson.');
            return;
        }

        const lessonId = result.insertId;

        // Insert questions into Questions table
        const sqlAddQuestions = 'INSERT INTO questions (question, choice1, choice2, choice3, choice4, correct_choice, lesson_id) VALUES ?';
        const values = questions.map((question, index) => [
            question,
            answers[index * 4],
            answers[index * 4 + 1],
            answers[index * 4 + 2],
            answers[index * 4 + 3],
            index * 4 + 1,
            lessonId
        ]);

        connection.query(sqlAddQuestions, [values], (err, results) => {
            if (err) {
                console.error('Error adding questions:', err);
                res.status(500).send('Failed to add questions.');
                return;
            }

            res.send('Lesson and questions added successfully.');
        });
    });
});





app.get('/product/:id', (req, res) => {
    const productId = parseInt(req.params.id);


    connection.query('SELECT * FROM products WHERE id = ?', [productId], (err, result) => {
        if (err) {
            console.error('Error fetching product: ', err);
            res.status(500).send('Internal Server Error');
        } else if (result.length > 0) {
            res.render('pages/product-detail', { product: result[0] });
        } else {
            res.status(404).send('Product not found');
        }
    });
});


app.get('/lessons/:id', (req, res) => {
    const lessonId = parseInt(req.params.id);

    connection.query('SELECT * FROM Lessons WHERE lesson_id = ?', [lessonId], (err, result) => {
        if (err) {
            console.error('Error fetching lesson: ', err);
            res.status(500).send('Internal Server Error');
        } else if (result.length > 0) {
            res.render('pages/lesson-detail', { lesson: result[0] });
        } else {
            res.status(404).send('Lesson not found');
        }
    });
});


app.listen(3000, function() {
    console.log('Server is running on port 3000');
});

app.get('/', function(req, res) {
    res.render('pages/index');
});


app.get('/quiz', (req, res) => {
    res.render('pages/quiz');
});

app.get('/questions', (req, res) => {
    res.render('pages/questions');
});

app.get('/add-lesson', (req, res) => {
    res.render('pages/add-lesson');
});




app.get('/lessons', (req, res) => {
    const sql = 'SELECT * FROM Lessons';

    connection.query(sql, (err, results) => {
        if (err) {
            console.error('Error fetching lessons: ', err);
            res.status(500).send('Internal Server Error');
            return;
        }

        res.render('pages/lessons', { lessons: results });
    });
});


app.get('/product', (req, res) => {
    connection.query("SELECT * FROM products", (err, result) => {
        if (err) {
            console.error('Error fetching products: ', err);
            res.status(500).send('Internal Server Error');
        } else {
            res.render('pages/product', { products: result });
        }
    });
});



// Add this route to handle POST request to add a new lesson
app.post('/addLesson', (req, res) => {
    const { name, description, image_url } = req.body;

    const sql = 'INSERT INTO Lessons (name, description, image_url) VALUES (?, ?, ?)';
    connection.query(sql, [name, description, image_url], (err, result) => {
        if (err) {
            console.error('Error adding new lesson: ', err);
            res.status(500).send('Failed to add new lesson');
        } else {
            console.log('New lesson added successfully');
            res.redirect('/lessons'); // Redirect back to lessons page or wherever appropriate
        }
    });
});






const express = require('express');
const ejs = require('ejs');
const bodyParser = require('body-parser');
const mysql = require('mysql');
const session = require('express-session');
const multer = require('multer');
const path = require('path');
const router = express.Router();


const app = express();

app.use(express.static('public')); 
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, '/views'));
app.use(bodyParser.urlencoded({ extended: true }));

const connection = mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "",
    database: "node_project_chanpe"
});

connection.connect((error) => {
    if (error) {
        console.error('Error connecting to the database: ', error);
    } else {
        console.log('Connected to the database');
    }
});

app.use(session({
    secret: "secret",
    resave: false,
    saveUninitialized: false
}));

const storage = multer.diskStorage({
    destination: path.join(__dirname, 'public/uploads'), // Update destination folder here
    filename: function(req, file, cb) {
        cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));
    }
});


// ตรวจสอบประเภทไฟล์
function checkFileType(file, cb) {
    const filetypes = /jpeg|jpg|png/;
    const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = filetypes.test(file.mimetype);
    if (mimetype && extname) {
        return cb(null, true);
    } else {
        cb('Error: Images only!');
    }
}

// ตั้งค่า Multer
const upload = multer({
    storage: storage,
    limits: { fileSize: 5 * 1024 * 1024 },
    fileFilter: function(req, file, cb) {
        checkFileType(file, cb);
    }
}).single('lesson_image');

// Routes
app.get('/add-lesson', (req, res) => {
    res.render('pages/add-lesson');
});

app.post('/addLessonAndQuestions', (req, res) => {
    upload(req, res, function(err) {
        if (err instanceof multer.MulterError) {
            if (err.code === 'LIMIT_FILE_SIZE') {
                return res.status(400).json({ success: false, message: 'File size is too large. Max limit is 5MB.' });
            }
            return res.status(500).json({ success: false, message: 'Internal Server Error' });
        } else if (err) {
            console.error('Error uploading file:', err);
            return res.status(500).json({ success: false, message: 'Error uploading file' });
        }

        const { lesson_name, lesson_description, questions, answers } = req.body;
        const lesson_image = req.file ? req.file.filename : 'default.jpg';

        const sql = 'INSERT INTO Lessons (name, description, image) VALUES (?, ?, ?)';
        connection.query(sql, [lesson_name, lesson_description, lesson_image], (err, result) => {
            if (err) {
                console.error('Error inserting lesson:', err);
                return res.status(500).json({ success: false, message: 'Error adding lesson' });
            }

            const lessonId = result.insertId;
            const questionSql = 'INSERT INTO Questions (lesson_id, question, answer1, answer2, answer3, answer4) VALUES ?';
            const questionData = questions.map((question, index) => [
                lessonId,
                question,
                answers[index * 4],
                answers[index * 4 + 1],
                answers[index * 4 + 2],
                answers[index * 4 + 3]
            ]);

            connection.query(questionSql, [questionData], (err) => {
                if (err) {
                    console.error('Error inserting questions:', err);
                    return res.status(500).json({ success: false, message: 'Error adding questions' });
                }

                res.json({ success: true, lessonId: lessonId, message: 'Lesson and questions added successfully' });
            });
        });
    });
});





-----------------------------------------------------------------------------------------check
// Example route to fetch product details by ID
app.get('/product/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    connection.query('SELECT * FROM products WHERE id = ?', [productId], (err, result) => {
        if (err) {
            console.error('Error fetching product: ', err);
            res.status(500).send('Internal Server Error');
        } else if (result.length > 0) {
            res.render('pages/product-detail', { product: result[0] });
        } else {
            res.status(404).send('Product not found');
        }
    });
});

// Example route to fetch lesson details by ID
app.get('/lessons/:id', (req, res) => {
    const lessonId = parseInt(req.params.id);
    connection.query('SELECT * FROM Lessons WHERE lesson_id = ?', [lessonId], (err, result) => {
        if (err) {
            console.error('Error fetching lesson: ', err);
            res.status(500).send('Internal Server Error');
        } else if (result.length > 0) {
            res.render('pages/lesson-detail', { lesson: result[0] });
        } else {
            res.status(404).send('Lesson not found');
        }
    });
});

// Route to fetch all lessons
app.get('/lessons', (req, res) => {
    const sql = 'SELECT * FROM Lessons';
    connection.query(sql, (err, results) => {
        if (err) {
            console.error('Error fetching lessons: ', err);
            res.status(500).send('Internal Server Error');
            return;
        }
        res.render('pages/lessons', { lessons: results });
    });
});

// Example route to fetch all products
app.get('/products', (req, res) => {
    connection.query("SELECT * FROM products", (err, result) => {
        if (err) {
            console.error('Error fetching products: ', err);
            res.status(500).send('Internal Server Error');
        } else {
            res.render('pages/products', { products: result });
        }
    });
});

// Example route to render the homepage
app.get('/', (req, res) => {
    res.render('pages/index');
});

// Example route to render the quiz page
app.get('/quiz', (req, res) => {
    res.render('pages/quiz');
});

// Example route to render the questions page
app.get('/questions', (req, res) => {
    res.render('pages/questions');
});

// Example route to handle POST request to add a new lesson
app.post('/addLesson', (req, res) => {
    const { name, description, image } = req.body;
    const sql = 'INSERT INTO Lessons (name, description, image_url) VALUES (?, ?, ?)';
    connection.query(sql, [name, description, image], (err, result) => {
        if (err) {
            console.error('Error adding new lesson: ', err);
            res.status(500).send('Failed to add new lesson');
        } else {
            console.log('New lesson added successfully');
            res.redirect('/lessons'); // Redirect back to lessons page or wherever appropriate
        }
    });
});

// Start the server
app.listen(3000, () => {
    console.log('Server is running on port 3000');
});










--------------------
const express = require('express');
const ejs = require('ejs');
const bodyParser = require('body-parser');
const mysql = require('mysql');
const session = require('express-session');
const multer = require('multer');
const path = require('path');
const router = express.Router();


const app = express();

app.use(express.static('public')); 
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, '/views'));
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.json());

const connection = mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "",
    database: "node_project_chanpe"
});

connection.connect((error) => {
    if (error) {
        console.error('Error connecting to the database: ', error);
    } else {
        console.log('Connected to the database');
    }
});

app.use(session({
    secret: "secret",
    resave: false,
    saveUninitialized: false
}));

const storage = multer.diskStorage({
    destination: path.join(__dirname, 'public/uploads'), // Update destination folder here
    filename: function(req, file, cb) {
        cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));
    }
});


// ตรวจสอบประเภทไฟล์
function checkFileType(file, cb) {
    const filetypes = /jpeg|jpg|png/;
    const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = filetypes.test(file.mimetype);
    if (mimetype && extname) {
        return cb(null, true);
    } else {
        cb('Error: Images only!');
    }
}

// ตั้งค่า Multer
const upload = multer({
    storage: storage,
    limits: { fileSize: 5 * 1024 * 1024 },
    fileFilter: function(req, file, cb) {
        checkFileType(file, cb);
    }
}).single('lesson_image');

// Routes
app.get('/add-lesson', (req, res) => {
    res.render('pages/add-lesson');
});


app.post('/addLessonAndQuestions', (req, res) => {
    upload(req, res, function (err) {
        if (err instanceof multer.MulterError) {
            if (err.code === 'LIMIT_FILE_SIZE') {
                return res.status(400).json({ success: false, message: 'File size is too large. Max limit is 5MB.' });
            }
            return res.status(500).json({ success: false, message: 'Internal Server Error' });
        } else if (err) {
            console.error('Error uploading file:', err);
            return res.status(500).json({ success: false, message: 'Error uploading file' });
        }

        const { lesson_name, lesson_description } = req.body;
        const lesson_image = req.file ? req.file.filename : 'default.jpg';

        const sql = 'INSERT INTO Lessons (name, description, image) VALUES (?, ?, ?)';
        connection.query(sql, [lesson_name, lesson_description, lesson_image], (err, lessonResult) => {
            if (err) {
                console.error('Error inserting lesson:', err);
                return res.status(500).json({ success: false, message: 'Error adding lesson' });
            }

            const lessonId = lessonResult.insertId; // แก้ lessonResult เป็น result ที่ได้จาก callback ของ query


            
            // Prepare questions data
            const questions = req.body.questions;
            const answers = req.body.answers;
            const correctChoices = req.body.correct_choices;
            
            const questionData = questions.map((question, index) => [
                question,
                answers[index * 4],
                answers[index * 4 + 1],
                answers[index * 4 + 2],
                answers[index * 4 + 3],
                correctChoices[index],
                lessonId
            ]);
            
            const questionSql = 'INSERT INTO questions (question, choice1, choice2, choice3, choice4, correct_choice, lesson_id) VALUES ?';
            
            // Insert questions into database
            connection.query(questionSql, [questionData], (err, questionResult) => {
                if (err) {
                    console.error('Error inserting questions:', err);
                    return res.status(500).json({ success: false, message: 'Error adding questions' });
                }
            
                res.json({ success: true, lessonId: lessonId, message: 'Lesson and questions added successfully' });
            });
            
        });
    });
});









// Example route to fetch product details by ID
app.get('/product/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    connection.query('SELECT * FROM products WHERE id = ?', [productId], (err, result) => {
        if (err) {
            console.error('Error fetching product: ', err);
            res.status(500).send('Internal Server Error');
        } else if (result.length > 0) {
            res.render('pages/product-detail', { product: result[0] });
        } else {
            res.status(404).send('Product not found');
        }
    });
});

// Example route to fetch lesson details by ID
app.get('/lessons/:id', (req, res) => {
    const lessonId = parseInt(req.params.id);
    connection.query('SELECT * FROM Lessons WHERE lesson_id = ?', [lessonId], (err, result) => {
        if (err) {
            console.error('Error fetching lesson: ', err);
            res.status(500).send('Internal Server Error');
        } else if (result.length > 0) {
            res.render('pages/lesson-detail', { lesson: result[0] });
        } else {
            res.status(404).send('Lesson not found');
        }
    });
});

// Route to fetch all lessons
app.get('/lessons', (req, res) => {
    const sql = 'SELECT * FROM Lessons';
    connection.query(sql, (err, results) => {
        if (err) {
            console.error('Error fetching lessons: ', err);
            res.status(500).send('Internal Server Error');
            return;
        }
        res.render('pages/lessons', { lessons: results });
    });
});

// Example route to fetch all products
app.get('/products', (req, res) => {
    connection.query("SELECT * FROM products", (err, result) => {
        if (err) {
            console.error('Error fetching products: ', err);
            res.status(500).send('Internal Server Error');
        } else {
            res.render('pages/products', { products: result });
        }
    });
});


app.get('/questions', (req, res) => {
    const lessonId = req.query.lesson_id;
    const sql = 'SELECT * FROM questions WHERE lesson_id = ?';

    connection.query(sql, [lessonId], (err, result) => {
        if (err) {
            console.error('Error fetching questions: ', err);
            res.status(500).send('Internal Server Error');
        } else {
            res.render('pages/questions', { questions: result });
        }
    });
});




// Example route to render the homepage
app.get('/', (req, res) => {
    res.render('pages/index');
});

// Example route to render the quiz page
app.get('/quiz', (req, res) => {
    res.render('pages/quiz');
});

// Example route to render the questions page
app.get('/questions', (req, res) => {
    res.render('pages/questions');
});

// Example route to handle POST request to add a new lesson
app.post('/addLesson', (req, res) => {
    const { name, description, image } = req.body;
    const sql = 'INSERT INTO Lessons (name, description, image_url) VALUES (?, ?, ?)';
    connection.query(sql, [name, description, image], (err, result) => {
        if (err) {
            console.error('Error adding new lesson: ', err);
            res.status(500).send('Failed to add new lesson');
        } else {
            console.log('New lesson added successfully');
            res.redirect('/lessons'); // Redirect back to lessons page or wherever appropriate
        }
    });
});

// Start the server
app.listen(3000, () => {
    console.log('Server is running on port 3000');
});





app.post('/login', (req, res) => {
    const { username, password } = req.body;
    
    const sql = 'SELECT * FROM users WHERE username = ?';
    connection.query(sql, [username], (err, results) => {
        if (err) {
            console.error('Error querying user:', err);
            return res.status(500).send('Internal Server Error');
        }
        
        if (results.length > 0) {
            const user = results[0];
            bcrypt.compare(password, user.password, (err, isMatch) => {
                if (err) {
                    console.error('Error comparing passwords:', err);
                    return res.status(500).send('Internal Server Error');
                }
                
                if (isMatch) {
                    req.session.userId = user.id; // Store user ID in session
                    res.redirect('/'); // Redirect to add test page
                } else {
                    res.status(401).send('Incorrect password'); // Incorrect password
                }
            });
        } else {
            res.status(404).send('User not found'); // User not found
        }
    });
});



    <h1>Translator</h1>
    <form action="/" method="POST">
        <textarea name="text" placeholder="Enter text" required></textarea>
        <select name="targetLang" required>
            <option value="" disabled selected>Select Target Language</option>
            <option value="ja">Japanese</option>
            <option value="th">Thai</option>
        </select>
        <button type="submit">Translate</button>
    </form>
    
    <% if (translation !== null) { %>
    <div class="translation">
        <h2>Translation</h2>
        <p><%= translation %></p>
    </div>
    <% } %>
    
    <% if (error !== null) { %>
    <p class="error"><%= error %></p>
    <% } %>






    

app.post('/add-lesson', uploadImageLesson, (req, res) => {
    // ตรวจสอบว่าผู้ใช้เข้าสู่ระบบหรือไม่
    if (!req.session || !req.session.user) {
        return res.status(401).json({ success: false, message: 'Unauthorized: Please log in.' });
    }

    const { title, description, conversations, characters } = req.body;
    const lesson_image = req.file ? req.file.filename : 'default.jpg';
    const created_by = req.session.user.id;

    // Check for missing fields
    if (!title || !description || !conversations || conversations.length === 0) {
        return res.status(400).json({ success: false, message: 'Missing required fields' });
    }

    const sqlLesson = 'INSERT INTO lessons (title, description, image, created_by) VALUES (?, ?, ?, ?)';
    connection.query(sqlLesson, [title, description, lesson_image, created_by], (err, lessonResult) => {
        if (err) {
            return handleError(res, 'Error inserting lesson: ' + err.message);
        }

        const lessonId = lessonResult.insertId;

        // Insert conversations
        const sqlCreateConversation = 'INSERT INTO conversations (lesson_id, title, created_by) VALUES (?, ?, ?)';
        const conversationInserts = conversations.map((conv) => [lessonId, conv.title, created_by]);

        connection.query(sqlCreateConversation, [lessonId, conversations[0].title, created_by], (err, conversationResult) => {
            if (err) {
                return handleError(res, 'Error creating conversation: ' + err.message);
            }

            const conversationId = conversationResult.insertId;
            const conversationLines = [];

            conversations.forEach((conv, index) => {
                if (conv.lines && conv.lines.length > 0) {
                    conv.lines.forEach(line => {
                        const leftText = line.left_text || '';
                        const rightText = line.right_text || '';
                        const romajiLeft = line.left_romaji || '';
                        const romajiRight = line.right_romaji || '';
                        const translationLeft = line.left_translation || '';
                        const translationRight = line.right_translation || '';

                        // Assuming character_id is available in the line
                        const leftCharacterId = line.left_character_id || null; // Replace with the actual character ID if needed
                        const rightCharacterId = line.right_character_id || null; // Replace with the actual character ID if needed

                        if (leftText) {
                            conversationLines.push([conversationId, leftCharacterId, index + 1, leftText, romajiLeft, translationLeft]);
                        }

                        if (rightText) {
                            conversationLines.push([conversationId, rightCharacterId, index + 1, rightText, romajiRight, translationRight]);
                        }
                    });
                }
            });

            const sqlConversationLines = 'INSERT INTO conversation_lines (conversation_id, character_id, line_number, content, romaji, translation) VALUES ?';
            if (conversationLines.length > 0) {
                connection.query(sqlConversationLines, [conversationLines], (err) => {
                    if (err) {
                        return handleError(res, 'Error inserting conversation lines: ' + err.message);
                    }
                });
            }

            // Check and insert characters
            if (characters && characters.length > 0) {
                const characterInserts = characters.map(character => {
                    const { character_name, description } = character;
                    return [lessonId, character_name, description, created_by];
                });

                const sqlInsertCharacters = 'INSERT INTO characters (lesson_id, character_name, description, created_by) VALUES ?';
                connection.query(sqlInsertCharacters, [characterInserts], (err) => {
                    if (err) {
                        return handleError(res, 'Error inserting characters: ' + err.message);
                    }

                    res.json({ success: true, message: 'Lesson, conversations, and characters added successfully', lessonId });
                });
            } else {
                res.json({ success: true, message: 'Lesson and conversations added successfully, no characters added', lessonId });
            }
        });
    });
});

// Function to handle errors
function handleError(res, message) {
    console.error(message);
    res.status(500).json({ success: false, message });
}


<!-- lessons.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Lessons</title>
    <link rel="stylesheet" href="/css/test-styles.css"> 
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="icon" type="image/png" href="images/logo.png">
    <style>
        
        img {
            width: 50%; /* ปรับขนาดความกว้างเป็น 100% ของพื้นที่บรรจุ */
            height: 10px; /* กำหนดความสูงคงที่ที่ต้องการ (ปรับให้เหมาะสมกับความต้องการของคุณ) */
            object-fit: cover; /* ปรับภาพให้พอดีกับกรอบในขณะที่รักษาสัดส่วน */
        }
        
    </style>
</head>
<body>
    <!-- Header -->
    <header>
        <div class="header">
            <div class="container">
                <div class="logo_section">
                    <div class="logo">
                        <a href="#"><img src="images/logo.png" alt="#"></a>
                    </div>
                </div>
                <div class="menu-area">
                    <nav class="main-menu">
                        <ul class="menu-area-main">
                            <li><a href="/">Home</a></li>
                            <li><a href="/products">อุปกรณ์การเรียน</a></li>
                            <li><a href="/submit-quiz">ตัวอักษร</a></li>
                            <li><a href="/questions">บทเรียน</a></li>
                            <li><a href="/tests">Quiz</a></li>
                            <% if (user) { %>
                                <li><a href="/profile">เข้าสู่ระบบของผู้ใช้</a></li>
                                <li><a href="/logout">ออกจากระบบ</a></li>
                            <% } else { %>
                                <li><a id="login-link" href="/login">Sign In</a></li>
                                <li><a id="sign-up-link" href="/sign_up"><img src="images/Login.png" alt="Sign Up"></a></li>
                            <% } %>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </header>
    
    <!-- End Header -->


    
    <main class="container">
        <a href="/add-lesson">Add lesson</a>
        <section class="grid">
            <% lessons.forEach(lesson => { %>
                <article>
                    <h2><%= lesson.title %></h2>
                    <img src="/uploads/<%= lesson.image %>" alt="Lesson Image">
                    <p><%= lesson.description %></p>
                    <a href="/lessons/<%= lesson.lesson_id %>">View Lesson</a>
                </article>
            <% }); %>            
        </section>
    </main>
    
    <script src="/js/addTest-script.js"></script>

    <!-- Footer -->
    <footer>
        <p>© 2024 Your Website Name</p>
    </footer>
    <!-- End Footer -->
</body>
</html>






app.post('/add-lesson', uploadImageLesson, async (req, res) => {
    // Check if the user is logged in
    if (!req.session || !req.session.user) {
        return res.status(401).json({ success: false, message: 'Unauthorized: Please log in.' });
    }

    const { title, description, characters, conversations } = req.body;
    const lessonImage = req.file.path;
    const created_by = req.session.user.id;

    // SQL Query to Insert Lesson Data
    const lessonQuery = 'INSERT INTO lessons (title, description, image, created_by) VALUES (?, ?, ?, ?)';
    
    try {
        const lessonResult = await new Promise((resolve, reject) => {
            connection.query(lessonQuery, [title, description, lessonImage, created_by], (err, result) => {
                if (err) {
                    return reject(err);
                }
                resolve(result);
            });
        });

        const lessonId = lessonResult.insertId;

        // Insert Characters and save their IDs
        const characterPromises = characters.map((character) => {
            const characterQuery = 'INSERT INTO characters (lesson_id, character_name, description, created_by) VALUES (?, ?, ?, ?)';
            return new Promise((resolve, reject) => {
                connection.query(characterQuery, [lessonId, character.character_name, character.description, created_by], (err, result) => {
                    if (err) {
                        return reject(err);
                    }
                    resolve(result.insertId); // Return the character ID
                });
            });
        });

        // Wait for all character inserts to complete and get their IDs
        const characterIds = await Promise.all(characterPromises);

        // Insert Conversations
        const conversationPromises = conversations.map((conversation, conversationIndex) => {
            // Get left dialogues
            const leftDialogues = conversation.left_text || [];
            const rightDialogues = conversation.right_text || [];
            let lineNumber = 1;  // สำหรับทั้ง left และ right dialogues

            leftDialogues.forEach((text, index) => {
                const leftRomaji = conversation.left_romaji[index];
                const leftTranslation = conversation.left_translation[index];
                const characterId = characterIds[0]; // Assume first character for left dialogue
            
                const conversationLineQuery = 'INSERT INTO conversation_lines (character_id, line_number, content, romaji, translation, lesson_id) VALUES (?, ?, ?, ?, ?, ?)';
                connection.query(conversationLineQuery, [characterId, lineNumber++, text, leftRomaji, leftTranslation, lessonId], (err) => {
                    if (err) console.error(err);
                });
            });
            
            rightDialogues.forEach((text, index) => {
                const rightRomaji = conversation.right_romaji[index];
                const rightTranslation = conversation.right_translation[index];
                const characterId = characterIds[1]; // Assume second character for right dialogue
            
                const conversationLineQuery = 'INSERT INTO conversation_lines (character_id, line_number, content, romaji, translation, lesson_id) VALUES (?, ?, ?, ?, ?, ?)';
                connection.query(conversationLineQuery, [characterId, lineNumber++, text, rightRomaji, rightTranslation, lessonId], (err) => {
                    if (err) console.error(err);
                });
            });
            
        });

        // Wait for all conversation inserts to complete
        await Promise.all(conversationPromises);

        res.json({ success: true, message: 'Lesson added successfully!' });
    } catch (err) {
        res.status(500).json({ success: false, message: err.message });
    }
});

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chan pe</title>
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="website icon" type="png" href="images/logo.png">
    <style>
        #bt-link {
            color: black; 
            border: 2px solid #008CBA;
            background-color: #04AA6D;

          }
          #bt-link:hover {
            background-color: #008CBA;
            color: white;
          }
    </style>
</head>

<body>
    
    <!-- Header -->
    <header>
        <div class="header">
            <div class="container">
                <button class="openbtn" onclick="openNav()">☰</button>
                <div class="logo_section">
                    <div class="logo">
                        <a href="#"><img src="images/logo.png" alt="#"></a>
                    </div>
                </div>
                <div class="menu-area">
                    <nav class="main-menu">
                        <ul class="menu-area-main">
                            <li><a href="/">Home</a></li>
                            <li><a href="/products">อุปกรณ์การเรียน</a></li>
                            <li><a href="/characters">ตัวอักษร</a></li>
                            <li><a href="/lessons">บทเรียน</a></li>
                            <li><a href="/tests">Quiz</a></li>
                            <li><a href="/DragandDropGame">DragandDropGame</a></li>
                            
                            <% if (user) { %>
                                <li><a href="/profile">เข้าสู่ระบบของผู้ใช้</a></li>
                                <li><a href="/logout">ออกจากระบบ</a></li>
                                <% } else { %>
                                    <li><a id="bt-link" href="/login">Log In</a></li>
                                    <li><a id="bt-link" href="/sign_up">Sign Up</a></li>
                                    <% } %>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
        <div id="mySidebar" class="sidebar">
            <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">×</a>
            <a href="/profile">My profile</a>
            <a href="#">About</a>
            <a href="#">About</a>
            <a href="#">------------</a>

            <a href="#">Services</a>
            <a href="#">Clients</a>
            <a href="#">Contact</a>
        </div>
    </header>
    <!-- End Header -->


    <section class="score">
        <span class="correct">0</span>/<span class="total">0</span>
        <button id="play-again-btn">Play Again</button>
    </section>
    <section class="draggable-items">
        <!-- Will be dynamically populated - Example Element: -->
        <!-- <i class="fab fa-codepen draggable" draggable="true" style="color: #111111;" id="codepen"></i> -->
    </section>
    <section class="matching-pairs">
        <!-- Will be dynamically populated - Example Element: -->
        <!-- <div class="matching-pair">
            <span class="label">Codepen</span><span class="droppable" data-brand="codepen"></span>
        </div> -->
    </section>
</body>

<script>
    
let correct = 0;
let total = 0;
const totalDraggableItems = 5;
const totalMatchingPairs = 5; // Should be <= totalDraggableItems

const scoreSection = document.querySelector(".score");
const correctSpan = scoreSection.querySelector(".correct");
const totalSpan = scoreSection.querySelector(".total");
const playAgainBtn = scoreSection.querySelector("#play-again-btn");

const draggableItems = document.querySelector(".draggable-items");
const matchingPairs = document.querySelector(".matching-pairs");
let draggableElements;
let droppableElements;

initiateGame();

function initiateGame() {
  const randomDraggableBrands = generateRandomItemsArray(totalDraggableItems, brands);
  const randomDroppableBrands = totalMatchingPairs<totalDraggableItems ? generateRandomItemsArray(totalMatchingPairs, randomDraggableBrands) : randomDraggableBrands;
  const alphabeticallySortedRandomDroppableBrands = [...randomDroppableBrands].sort((a,b) => a.brandName.toLowerCase().localeCompare(b.brandName.toLowerCase()));
  
  // Create "draggable-items" and append to DOM
  for(let i=0; i<randomDraggableBrands.length; i++) {
    draggableItems.insertAdjacentHTML("beforeend", `
      <i class="fab fa-${randomDraggableBrands[i].iconName} draggable" draggable="true" style="color: ${randomDraggableBrands[i].color};" id="${randomDraggableBrands[i].iconName}"></i>
    `);
  }
  
  // Create "matching-pairs" and append to DOM
  for(let i=0; i<alphabeticallySortedRandomDroppableBrands.length; i++) {
    matchingPairs.insertAdjacentHTML("beforeend", `
      <div class="matching-pair">
        <span class="label">${alphabeticallySortedRandomDroppableBrands[i].brandName}</span>
        <span class="droppable" data-brand="${alphabeticallySortedRandomDroppableBrands[i].iconName}"></span>
      </div>
    `);
  }
  
  draggableElements = document.querySelectorAll(".draggable");
  droppableElements = document.querySelectorAll(".droppable");
  
  draggableElements.forEach(elem => {
    elem.addEventListener("dragstart", dragStart);
    // elem.addEventListener("drag", drag);
    // elem.addEventListener("dragend", dragEnd);
  });
  
  droppableElements.forEach(elem => {
    elem.addEventListener("dragenter", dragEnter);
    elem.addEventListener("dragover", dragOver);
    elem.addEventListener("dragleave", dragLeave);
    elem.addEventListener("drop", drop);
  });
}

// Drag and Drop Functions

//Events fired on the drag target

function dragStart(event) {
  event.dataTransfer.setData("text", event.target.id); // or "text/plain"
}

//Events fired on the drop target

function dragEnter(event) {
  if(event.target.classList && event.target.classList.contains("droppable") && !event.target.classList.contains("dropped")) {
    event.target.classList.add("droppable-hover");
  }
}

function dragOver(event) {
  if(event.target.classList && event.target.classList.contains("droppable") && !event.target.classList.contains("dropped")) {
    event.preventDefault();
  }
}

function dragLeave(event) {
  if(event.target.classList && event.target.classList.contains("droppable") && !event.target.classList.contains("dropped")) {
    event.target.classList.remove("droppable-hover");
  }
}

function drop(event) {
  event.preventDefault();
  event.target.classList.remove("droppable-hover");
  const draggableElementBrand = event.dataTransfer.getData("text");
  const droppableElementBrand = event.target.getAttribute("data-brand");
  const isCorrectMatching = draggableElementBrand===droppableElementBrand;
  total++;
  if(isCorrectMatching) {
    const draggableElement = document.getElementById(draggableElementBrand);
    event.target.classList.add("dropped");
    draggableElement.classList.add("dragged");
    draggableElement.setAttribute("draggable", "false");
    event.target.innerHTML = `<i class="fab fa-${draggableElementBrand}" style="color: ${draggableElement.style.color};"></i>`;
    correct++;  
  }
  scoreSection.style.opacity = 0;
  setTimeout(() => {
    correctSpan.textContent = correct;
    totalSpan.textContent = total;
    scoreSection.style.opacity = 1;
  }, 200);
  if(correct===Math.min(totalMatchingPairs, totalDraggableItems)) { // Game Over!!
    playAgainBtn.style.display = "block";
    setTimeout(() => {
      playAgainBtn.classList.add("play-again-btn-entrance");
    }, 200);
  }
}

// Other Event Listeners
playAgainBtn.addEventListener("click", playAgainBtnClick);
function playAgainBtnClick() {
  playAgainBtn.classList.remove("play-again-btn-entrance");
  correct = 0;
  total = 0;
  draggableItems.style.opacity = 0;
  matchingPairs.style.opacity = 0;
  setTimeout(() => {
    scoreSection.style.opacity = 0;
  }, 100);
  setTimeout(() => {
    playAgainBtn.style.display = "none";
    while (draggableItems.firstChild) draggableItems.removeChild(draggableItems.firstChild);
    while (matchingPairs.firstChild) matchingPairs.removeChild(matchingPairs.firstChild);
    initiateGame();
    correctSpan.textContent = correct;
    totalSpan.textContent = total;
    draggableItems.style.opacity = 1;
    matchingPairs.style.opacity = 1;
    scoreSection.style.opacity = 1;
  }, 500);
}

// Auxiliary functions
function generateRandomItemsArray(n, originalArray) {
  let res = [];
  let clonedArray = [...originalArray];
  if(n>clonedArray.length) n=clonedArray.length;
  for(let i=1; i<=n; i++) {
    const randomIndex = Math.floor(Math.random()*clonedArray.length);
    res.push(clonedArray[randomIndex]);
    clonedArray.splice(randomIndex, 1);
  }
  return res;
}
</script>
</html>